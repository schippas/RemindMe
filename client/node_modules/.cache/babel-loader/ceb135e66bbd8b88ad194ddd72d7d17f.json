{"ast":null,"code":"import _classCallCheck from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/schippas/Desktop/RemindMe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/schippas/Desktop/RemindMe/client/src/MainEventPage.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\"; // import \"./mainEventPage.css\";\n\nimport \"./createEvent.css\";\nimport Calendar from \"react-calendar\";\n\nvar MainEventPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainEventPage, _Component);\n\n  function MainEventPage(props) {\n    var _this;\n\n    _classCallCheck(this, MainEventPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainEventPage).call(this, props));\n    _this.state = {\n      date: new Date()\n    };\n\n    _this.onChange = function (date) {\n      _this.setState({\n        date: date\n      });\n    };\n\n    _this.state = {\n      createNewEvent: false,\n      events: [//fetch events here\n      ]\n    };\n\n    _this.onAddItem = function (updateVal) {\n      _this.setState(function (state) {\n        var events = state.events.concat(updateVal);\n        return {\n          events: events,\n          value: {}\n        };\n      });\n    };\n\n    _this.state = {\n      events: [],\n      value: {},\n      isToggleOn: true\n    }; // This binding is necessary to make `this` work in the callback\n\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MainEventPage, [{\n    key: \"handleClickEvent\",\n    value: function handleClickEvent() {\n      //this.setState({ createNewEvent: true });\n      console.log(\"create event redirect\");\n      window.location.replace(\"/create\");\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState(function (prevState) {\n        return {\n          isToggleOn: !prevState.isToggleOn\n        };\n      });\n    }\n  }, {\n    key: \"onMainEventClick\",\n    value: function onMainEventClick() {\n      window.location.replace(\"/events\");\n    }\n  }, {\n    key: \"onLoginClick\",\n    value: function onLoginClick() {\n      window.location.replace(\"/\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    //should be invoked automatically\n    value: function componentDidMount() {\n      var updateEvent = this.onAddItem;\n      var xhttp = new XMLHttpRequest();\n      xhttp.open(\"POST\", \"/api/listEvents\", true);\n      xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      xhttp.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n          var response = JSON.parse(this.responseText);\n          console.log(response);\n\n          if (response.status === 'okay') {\n            for (var i = 0; i < response.events.length; i++) {\n              var event = response.events[i];\n              updateEvent(event);\n            }\n          }\n        }\n      }; //xhttp.send(data);\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"pg_bgd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"headerBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \" RemindMe \"), React.createElement(\"div\", {\n        className: \"options_bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"create_event_btn\",\n        className: \"option_bar_button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Create Event\"), React.createElement(\"button\", {\n        id: \"return_main_btn\",\n        className: \"option_bar_button2\",\n        onClick: this.handleReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Return to Main Events Page\"), React.createElement(\"button\", {\n        id: \"login/signup\",\n        className: \"option_bar_button3\",\n        onClick: this.loginReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Login/Signup\")), React.createElement(Calendar, {\n        onChange: this.onChange,\n        value: this.state.date,\n        calendarType: \"US\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"box23\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"titleBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Your Weekly Dose of Events\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"mini_script\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Subscribe(d)\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"which_week\",\n        type: \"text\",\n        id: \"weekBox\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), this.componentDidMount(), React.createElement(\"div\", {\n        className: \"events1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.events.map(function (_ref) {\n        var event_id = _ref.event_id,\n            event_name = _ref.event_name,\n            event_info = _ref.event_info,\n            event_date = _ref.event_date,\n            event_time = _ref.event_time;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"togglebtn\",\n          onClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, _this2.state.isToggleOn ? 'Interested' : 'Not Interested'), React.createElement(\"h1\", {\n          className: \"inBoxEventDescription\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, event_name.toString()));\n      })))) // <div className=\"logo\">\n      //   <div className={\"bannerStyle\"}>\n      //     <h1>RemindMe</h1>\n      //   </div>\n      //   <div>\n      //     <button onClick={this.onMainEventClick}>Main Event Page</button>\n      //     <button onClick={this.handleClickEvent}>Create Event Now</button>\n      //     <button onClick={this.onLoginClick}>Login/Signup</button>\n      //   </div>\n      //   <div className={\"box\"}>\n      //     <div className={\"calendar\"}>Calendar Here</div>\n      //     <div className={\"eventList\"}>Event List Here</div>\n      //   </div>\n      // </div>\n      ;\n    }\n  }]);\n\n  return MainEventPage;\n}(Component);\n\nexport default withRouter(MainEventPage);","map":{"version":3,"sources":["/home/schippas/Desktop/RemindMe/client/src/MainEventPage.js"],"names":["React","Component","withRouter","Calendar","MainEventPage","props","state","date","Date","onChange","setState","createNewEvent","events","onAddItem","updateVal","concat","value","isToggleOn","handleClick","bind","console","log","window","location","replace","prevState","updateEvent","xhttp","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","response","JSON","parse","responseText","i","length","event","handleReturn","loginReturn","componentDidMount","map","event_id","event_name","event_info","event_date","event_time","toString"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\n// import \"./mainEventPage.css\";\nimport \"./createEvent.css\";\nimport Calendar from \"react-calendar\";\n\nclass MainEventPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n\t\tevents: [],\n\t\tvalue: {},\t\t\n\t\tisToggleOn: true \n\t};\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n\n    }\n\n    state = {\n        date: new Date(),\n    }\n\n    handleClickEvent() {\n        //this.setState({ createNewEvent: true });\n        console.log(\"create event redirect\");\n        window.location.replace(\"/create\");\n    }\n\n    handleClick() {\n        this.setState(function(prevState) {\n            return { isToggleOn: !prevState.isToggleOn };\n        });\n    }\n\n    onMainEventClick() {\n        window.location.replace(\"/events\");\n    }\n\n    onLoginClick() {\n        window.location.replace(\"/\");\n    }\n\n    onChange = (date) => {\n        this.setState({ date })\n    }\n\n    state = {\n        createNewEvent: false,\n        events: [\n            //fetch events here\n        ]\n    };\n\n  onAddItem = ( updateVal ) => {\n      this.setState(state => {\n          const events = state.events.concat(updateVal);\n          return {\n              events,\n              value:{},\n          };\n      })\n  };\n\n\n//should be invoked automatically\ncomponentDidMount( ){\n\n\n        const updateEvent = this.onAddItem;\n\n\tvar xhttp = new XMLHttpRequest();\n        xhttp.open(\"POST\", \"/api/listEvents\" , true);\n        xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhttp.onreadystatechange = function (){\n        \tif ( this.readyState === 4 && this.status === 200 ){\n                \tvar response = JSON.parse(this.responseText);\n                \tconsole.log(response);\n\n                \tif ( response.status === 'okay' ){\n                \t\tfor ( var i = 0; i < response.events.length; i++ ){\n                        \t\tvar event = response.events[i]\n                        \t\tupdateEvent(event)\n                    \t\t}\n                \t}\n            \t}\n        };\n        //xhttp.send(data);\n}\n\n\n\n    render() {\n        return (\n\n            <div className=\"pg_bgd\">\n                <h1 className=\"headerBar\"> RemindMe </h1>\n\n                <div className=\"options_bar\">\n                    <button id=\"create_event_btn\" className=\"option_bar_button\">\n                        Create Event\n          </button>\n\n                    <button\n                        id=\"return_main_btn\"\n                        className=\"option_bar_button2\"\n                        onClick={this.handleReturn} >\n                        Return to Main Events Page\n          </button>\n\n                    <button\n                        id=\"login/signup\"\n                        className=\"option_bar_button3\"\n                        onClick={this.loginReturn}>\n                        Login/Signup\n          </button>\n                </div>\n                <Calendar onChange={this.onChange} value={this.state.date} calendarType=\"US\"></Calendar>\n                <div className=\"box23\">\n                    <h1 className=\"titleBar\">Your Weekly Dose of Events</h1>\n\n                    <div>\n                        <h3 className=\"mini_script\">Subscribe(d)</h3>\n                    </div>{}\n\n                    <div>\n                        <input className=\"which_week\" type=\"text\" id=\"weekBox\" value={this.state.date} />\n                    </div>\n\n{/*start of my garbage */}\n\t\t\t{this.componentDidMount()}\n\t\t\t<div className='events1'>\n\t\t\t{\n\t\t\t\tthis.state.events.map(({event_id, event_name, event_info, event_date, event_time})=>{\n\t\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t    <button className=\"togglebtn\" onClick={this.handleClick}>\n                            \t    {this.state.isToggleOn ? 'Interested' : 'Not Interested'}\n                                    </button>\n\n                                    <h1 className=\"inBoxEventDescription\">{event_name.toString()}</h1>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t\t\t</div>\n\n                    {/*current <div className=\"each-box\">\n\n                        <button className=\"togglebtn\" onClick={this.handleClick}>\n                            {this.state.isToggleOn ? 'Interested' : 'Not Interested'}\n                        </button>\n\n                        <h1 className=\"inBoxEventDescription\">fasfasd</h1>\n\n                    </div> current*/}\n\n\n\n                    {/* <div className=\"each-box2\">\n                  \n                    <button className=\"togglebtn\" onClick={this.handleClick}>\n                              {this.state.isToggleOn ? 'Interested' : 'Not Interested'}\n                    </button>\n                    \n                    <h1>fasfasd</h1>\n\n                </div>\n\n                <div className=\"each-box2\">\n                   \n                      <button className=\"togglebtn\" onClick={this.handleClick}>\n                          {this.state.isToggleOn ? 'Interested' : 'Not Interested'}\n                      </button>\n                \n                      <h1>fasfasd</h1>\n\n                </div> */}\n                </div>\n\n            </div>\n\n\n\n            // <div className=\"logo\">\n            //   <div className={\"bannerStyle\"}>\n            //     <h1>RemindMe</h1>\n            //   </div>\n            //   <div>\n            //     <button onClick={this.onMainEventClick}>Main Event Page</button>\n            //     <button onClick={this.handleClickEvent}>Create Event Now</button>\n            //     <button onClick={this.onLoginClick}>Login/Signup</button>\n            //   </div>\n            //   <div className={\"box\"}>\n            //     <div className={\"calendar\"}>Calendar Here</div>\n            //     <div className={\"eventList\"}>Event List Here</div>\n            //   </div>\n            // </div>\n\n\n        );\n    }\n}\n\nexport default withRouter(MainEventPage);\n"]},"metadata":{},"sourceType":"module"}